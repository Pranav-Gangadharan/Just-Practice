 Either to compare one algorithm with another algorithm or to evaluate the performance of a single algorithm

        - time complexity
        - space complexity

    time complexity => amount of time taken by an algorithm to run!
    space complexity => amount of memory taken by an algorithm to run!

    Mathematical Notations: Asymptotic Notations

    1. Big - 'O' (Big Oh) - upper bound
    2. Big - 'Ω' (Big Omega) - lower bound
    3. Big - 'Θ' (Big Theta) - tight bound

    Situations/Cases: (Inputs)

    1. Worst Case
    2. Best Case
    3. Average Case

    time complexity: upper bound, worst case - Big - 'O'

    Example:

    Algorithm: Linear Search

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    Case (first element): If the key = 1, Comparisons => 1, Best Case => O(1) - abbr: Order of 1

    Case (middle element): If the key = 5, Comparisons => 5, Average Case => O(N/2) => O(N)

    Case (last element): If the key = 10, Comparisons => 10, Worst Case => O(N)
         (element not present): If the key = 11, Comparisons => 10, Worst Case => O(N)

-----------------------------------------------------------------------------------------------------------------

    let a = 0, b = 0;
    for (i = 0; i < N; i++) {
        a = a + rand();
    }
    for (j = 0; j < M; j++) {
        b = b + rand();
    }

    time complexity: O(N+M)

    Options:

    O(1)
    O(logN)
    O(N)
    O(N logN)
    O(N^2)
    O(N^2 logN)
    O(N^3)
    O(N^3 logN)
    O(2^N)
    O(N!)


    Answer:

    let a = 0, b = 0; // declarations, initializations, conditionals, expressions, assignments
    => O(1), Constant time

    for (i = 0; i < N; i++) {
        a = a + rand();
    }

    total executions = values of i
    i = 0, 1, 2, 3, 4, 5 ,...., N-1 => N

    for (j = 0; j < M; j++) {
        b = b + rand();
    }

    total executions = values of j
    j = 0, 1, 2, 3, 4, 5, ....., M-1 => M

    total time complexity = T(N, M) = 1 + N + M
                                    = N + M (Since 1 is constant)
                                    = O(N + M)
    
*/

/*
    let a = 0, b = 0;
    let M = 2N;
    for (i = 0; i < N; i++) {
        a = a + rand();
    }
    for (j = 0; j < M; j++) {
        b = b + rand();
    }

    time complexity, T(N) = 1 + N + M
                          = 1 + N + 2N
                          = 1 + 3N
                          = 3N
                          = O(N)
*/

/*
    let a = 0, b = 0;
    for (i = 0; i < N; i++) {
        a = a + rand();
        for (j = 0; j < N; j++) {
            b = b + rand();
        }
    }

    time complexity: O(N*M), O(N^2)

    T(N) = 1 + N * N
         = N^2
         = O(N^2)

    Answer:

    1. Make some assumptions for N

    N = 4
        i = 0; j = 0, 1, 2, 3 => 4 times
        i = 1; j = 0, 1, 2, 3 => 4 times
        i = 2; j = 0, 1, 2, 3 => 4 times
        i = 3; j = 0, 1, 2, 3 => 4 times

        total executions = 4 + 4 + 4 + 4
                         = 16
    N = 5
        i = 0; j = 0, 1, 2, 3, 4 => 5
        i = 1; j = 0, 1, 2, 3, 4 => 5
        i = 2; j = 0, 1, 2, 3, 4 => 5
        i = 3; j = 0, 1, 2, 3, 4 => 5
        i = 4; j = 0, 1, 2, 3, 4 => 5

        total executions = 5 + 5 + 5 + 5 + 5
                         = 25
    N = 6

    2. Summarize & pattern identification

    For N = 4, executions = 16
    For N = 5, executions = 25
    For N = 6, executions = 36

    executions = N^2

    3. Calculate total time complexity
    
    total time complexity, T(N) = 1 + N^2
                                = O(N^2)
*/

/*
    Homework:

    let a = 0;
    for (i = 0; i < N; i++) {
        for (j = N; j > i; j--) {
            a = a + i + j; 
        }
    }

Answer:

    1. Make some assumptions for N

    N = 2
        i = 0, j = 2, 1 => 2 times
        i = 1, j = 2 => 1 time

        total executions = 2 + 1
                         = 3

    N = 3
        i = 0, j = 3, 2, 1 => 3 times
        i = 1, j = 3, 2 => 2 times
        i = 2, j = 3 => 1 time

        total executions = 3 + 2 + 1
                         = 6

    N = 4
        i = 0, j = 4, 3, 2, 1 => 4 times
        i = 1, j = 4, 3, 2 => 3 times
        i = 2, j = 4, 3 => 2 times
        i = 3, j = 4 => 1 time

        total executions = 4 + 3 + 2 + 1
                         = 10

    N = 5
        i = 0, j = 5, 4, 3, 2, 1 => 5 times
        i = 1, j = 5, 4, 3, 2 => 4 times
        i = 2, j = 5, 4, 3 => 3 times
        i = 3, j = 5, 4 => 2 times
        i = 4, j = 5 => 1 time

        total executions = 5 + 4 + 3 + 2 + 1
                         = 15

2. Summarize & pattern identification

    For N = 2, executions = 3
    For N = 3, executions = 6
    For N = 4, executions = 10

    N * (N + 1) / 2.
    = 2 * 3 / 2
    = 6 / 2
    = 3

    N * (N + 1) / 2.
    = 3 * 4 / 2
    = 12 / 2
    = 6

    N * (N + 1) / 2.
    = 4 * 5 / 2
    = 20 / 2
    = 10

    3. Calculate total time complexity
    
    total time complexity, T(N) = 1 + N * (N + 1) / 2.
                                = N * N
                                = O(N^2)



let i, j, k=0;
for(i=n/2;i<=n; i++){
    for(j=2;j<=n;j=j*2){
        k=k+n/2;
    }
}

1. Make some assumptions for N


    N = 5
        i = 2.5, j = 2, 4 => 2 times
        i = 3.5, j = 2, 4 => 2 times
        i = 4.5, j = 2, 4 => 2 times

        total executions = 2 + 2 + 2
                         = 6

     N = 6
        i = 3, j = 2, 4 => 2 times
        i = 4, j = 2, 4 => 2 times
        i = 5, j = 2, 4 => 2 times
        i = 6, j = 2, 4 => 2 times

        total executions = 2 + 2 + 2 + 2 
                         = 8


    N = 7

        i = 3.5, j = 2, 4 => 2 times
        i = 4.5, j = 2, 4 => 2 times
        i = 5.5, j = 2, 4 => 2 times
        i = 6.5, j = 2, 4 => 2 times

        total executions = 2 + 2 + 2 + 2 
                         = 8

2. Summarize & pattern identification

    For N = 5, executions = 6
    For N = 6, executions = 8
    For N = 7, executions = 8